@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;700&display=swap&text=1234567890');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    font-family: 'JetBrains Mono', 'Noto Sans JP', system-ui, sans-serif;
    font-synthesis: none;
    line-height: 1.5;

    /* color-scheme: light dark; */

    /* Basic Colors */

    --color-white: 255 255 255;
    --color-black: 72 72 72; /* 484848 */
    --color-gray-surface: 248 248 248; /* f8f8f8 */
    --color-gray-light: 242 242 242; /* f2f2f2 */
    --color-gray-bright: 192 192 192; /* c0c0c0 */
    --color-gray-base: 128 128 128; /* 808080 */
    --color-gray-dark: 103 103 103; /* 676767 */
    --color-gray-outline: 208 215 222; /* d0d7de */
    --color-gray-surface-dark: 54 54 54; /* f8f8f8 */

    /* Theme Colors */

    --color-primary: 88 213 217; /* 58d4d9 */
    --color-primary-600: 34 176 186; /* 22b1ba */
    --color-primary-900: 25 100 98; /* 196461 */
    --color-secondary: 248 167 156; /* f8a79c */
    --color-secondary-300: 241 133 117; /* f18575 */
    --color-secondary-700: 224 80 45; /* e0502d */
    --color-error: 248 104 104; /* f86868 */

    text-rendering: optimizelegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  body {
    color: rgb(var(--color-black));
    background-color: rgb(var(--color-gray-surface) / 1);
  }

  /* 
   * Toggling dark mode manually
   * https://tailwindcss.com/docs/dark-mode#toggling-dark-mode-manually
   */
  body.dark {
    color: rgb(var(--color-gray-light));
    background-color: rgb(var(--color-gray-surface-dark) / 1);
  }

  /* 
   * https://developer.mozilla.org/en-US/docs/Web/CSS/::backdrop
   * > ::backdrop neither inherits from nor is inherited by any other elements.
   */
  dialog::backdrop {
    background-color: rgb(103 103 103 / 0.7); /* --color-gray-dark */
  }
}

@layer components {
  :root {
    --grad-sky-light: linear-gradient(
      214deg,
      rgb(78 140 213 / 0.6) 43%,
      rgb(246 131 116 / 0.18) 84%
    );
  }

  .c-fieldset {
    display: grid;
    grid-template:
      'label message' 36px
      'input-container input-container' /
      fit-content(100%) minmax(0, 1fr);
    grid-auto-rows: 48px;
    gap: 8px 16px;
    width: 100%;

    &__input-weapper {
      display: grid;
      grid-area: input-container;
      grid-template: 'input-element icon' / minmax(0, 1fr) 28px;
      min-height: 48px;

      & input {
        display: grid;
        grid-area: input-element;
        padding-bottom: 2px;
        background-color: transparent;
        opacity: 1; /* NOTE: Need opacity for disabled background-color in iOS */
      }

      .c-fieldset__input-icon {
        display: grid;
        grid-area: icon;
        place-items: center;
      }
    }

    & label {
      display: grid;
      grid-area: label;
      grid-template-columns: 24px auto;
      place-self: center start;

      &::before {
        justify-self: start;
        width: 24px;
        height: 24px;
        content: '';
        background-color: rgb(var(--color-gray-outline) / 1);
        mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M16 12L10 18V6L16 12Z' fill='currentColor'%3E%3C/path%3E%3C/svg%3E")
          no-repeat center;
      }
    }

    &:focus-within {
      & label::before {
        background-color: rgb(var(--color-primary) / 1);
      }

      .c-fieldset__input-weapper {
        border: solid 1px rgb(var(--color-gray-outline) / 0.45);
        box-shadow:
          inset 0 0 6px rgb(var(--color-primary-900) / 0.15),
          0 0 6px 2px rgb(var(--color-primary-600) / 0.15);
      }
    }

    &__error-message {
      grid-area: message;
      place-self: center start;
      max-width: 100%;
      color: rgb(var(--color-error) / 1);
    }

    /* 
     * NOTE: Is 'aria-invalid' not working in iOS? 
     * &:has(input[aria-invalid='true']) {
    */
    &:has(.has-error) {
      label,
      &::placeholder {
        color: rgb(var(--color-error) / 1);
      }

      & label::before {
        background-color: rgb(var(--color-error) / 1);
      }

      .c-fieldset__input-weapper {
        border: solid 1px rgb(var(--color-error) / 1) !important;
        box-shadow:
          inset 0 0 6px rgb(var(--color-error) / 0.15),
          0 0 6px 2px rgb(var(--color-error) / 0.6);
      }
    }
  }
}
